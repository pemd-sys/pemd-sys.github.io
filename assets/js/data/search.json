[ { "title": "Mathematical Expression Tree in Python", "url": "/posts/Python-Expression-Trees/", "categories": "Python, Coding, Basics", "tags": "Coding", "date": "2024-10-17 01:02:00 +0100", "snippet": "IntroductionThis page describes a python mathematical expression treeCode# https://www.teach.cs.toronto.edu/~csc148h/notes/trees/expression_trees.html#from __future__ import annotationsfrom typing ...", "content": "IntroductionThis page describes a python mathematical expression treeCode# https://www.teach.cs.toronto.edu/~csc148h/notes/trees/expression_trees.html#from __future__ import annotationsfrom typing import Anyclass Expr: \"\"\"An abstract class representing a Python expression. \"\"\" def evaluate(self) -&gt; Any: \"\"\"Return the *value* of this expression. The returned value should be the result of how this expression would be evaluated by the Python interpreter. \"\"\" raise NotImplementedErrorclass Num(Expr): \"\"\"An numeric constant literal. Attributes: n: the value of the constant \"\"\" n: int | float def __init__(self, number: int | float) -&gt; None: \"\"\"Initialize a new numeric constant.\"\"\" self.n = number def evaluate(self) -&gt; Any: \"\"\"Return the *value* of this expression. The returned value should be the result of how this expression would be evaluated by the Python interpreter. &gt;&gt;&gt; number = Num(10.5) &gt;&gt;&gt; number.evaluate() 10.5 \"\"\" return self.n # Simply return the value itself!class BinOp(Expr): \"\"\"An arithmetic binary operation. Attributes: left: the left operand op: the name of the operator right: the right operand Representation Invariants: - self.op == '+' or self.op == '*' \"\"\" left: Expr op: str right: Expr def __init__(self, left: Expr, op: str, right: Expr) -&gt; None: \"\"\"Initialize a new binary operation expression. Precondition: &lt;op&gt; is the string '+' or '*'. \"\"\" self.left = left self.op = op self.right = right def evaluate(self) -&gt; Any: \"\"\"Return the *value* of this expression. \"\"\" left_val = self.left.evaluate() right_val = self.right.evaluate() if self.op == '+': return left_val + right_val elif self.op == '*': return left_val * right_val else: raise ValueError(f'Invalid operator {self.op}') # added extra to test operator def __add__(self, other): if isinstance(other, Expr): return BinOp(self,'+',other) elif isinstance(other, int | float): return BinOp(self,'+',Num(other)) else: raise NotImplementedError @classmethod def number(cls, num): \"Initialize number\" return cls(Num(0.0),'+',Num(num))# test number as expression and add operatorx = BinOp.number(10)y = (x + 10).evaluate()a = BinOp(Num(3), '+', Num(5.5)) # ((3 + 5.5) * (0.5 + (15.2 * -13.3)))b = BinOp( BinOp(Num(3), '+', Num(5.5)), '*', BinOp( Num(0.5), '+', BinOp(Num(15.2), '*', Num(-13.3))))print(a.evaluate())print(b.evaluate())#20.0#8.5#-1714.11" }, { "title": "Linked List example in Python", "url": "/posts/Python-linked-list-example/", "categories": "Python, Coding, Basics", "tags": "Coding", "date": "2024-10-17 01:02:00 +0100", "snippet": "IntroductionThis page describes a python linked list exampleCode# https://codingnomads.com/how-to-build-linked-lists-in-pythonclass Node: def __init__(self, value=None): self.value = valu...", "content": "IntroductionThis page describes a python linked list exampleCode# https://codingnomads.com/how-to-build-linked-lists-in-pythonclass Node: def __init__(self, value=None): self.value = value self.next = None def __repr__(self): return f\"Node({self.value})\"class LinkedList: def __init__(self): self.head = None self.tail = None self.length = 0 def append(self, value): new_node = Node(value) if self.head is None: self.head = new_node self.tail = new_node else: self.tail.next = new_node self.tail = new_node self.length += 1 def prepend(self, value): new_node = Node(value) if self.head is None: self.head = new_node self.tail = new_node else: new_node.next = self.head self.head = new_node self.length += 1 def get_node(self, index): if index &lt; 0 or index &gt;= self.length: return None current_node = self.head for i in range(index): current_node = current_node.next return current_node def __repr__(self): node = self.head nodes = [] while node is not None: nodes.append(str(node)) node = node.next nodes.append(\"None\") return \" -&gt; \".join(nodes)if __name__ == \"__main__\": # Create a new linked list ll = LinkedList() # Append a couple of nodes to the linked list ll.append(10) ll.append(20) ll.append(30) # Visualize the linked list print(ll) # Node(10) -&gt; Node(20) -&gt; Node(30) -&gt; None" }, { "title": "VPN in WSL2", "url": "/posts/wsl2-vpn/", "categories": "Electronics, Basics", "tags": "Electronics", "date": "2024-07-07 01:20:00 +0100", "snippet": "IntroductionThis article is guide to using vpn from inside wsl2. The host windows maybe not on VPN. This can be useful sometimes when you are testing networking codes etc. For this article I am usi...", "content": "IntroductionThis article is guide to using vpn from inside wsl2. The host windows maybe not on VPN. This can be useful sometimes when you are testing networking codes etc. For this article I am using mullvad VPN as I think its the best of the VPNs i have tried so far and the prices are reasonable.Setup Mullvad VPNI will be using the openVPN version of the mullvad installer. First create an account in mullvad and pay the fee. Then go to your account page and configure the openvpn setting as shown in the screenshot below and download the zip file.The do the following steps as detailed in the mullvad OpenVPN installation on Linux page.sudo apt-get update &amp;&amp; sudo apt-get upgradesudo apt-get install unzipsudo apt-get install openvpnunzip xxxx_xx.zip (replace xxxx_xx.zip with the name of the file you downloaded from the mullvad configurator for example mine was mullvad_config_linux_gb_lon.zip).sudo cp ./mullvad_config_linux_gb_lon/* /etc/openvpn/sudo openvpn --config ./mullvad_config_linux_gb_lon/mullvad_gb_lon.confsudo service openvpn startTo check whether you are indeed connected to mullvad vpn run the following and see an expected result$ curl https://am.i.mullvad.net/connectedYou are connected to Mullvad (server gb-lon-ovpn-302). Your IP address is xxx.xxx.xxx.xxxTo check if openvpn service is running correctly without errors run the following. It should show as active.sudo systemctl status openvpn@mullvad_gb_lon.servicePlug DNS leaksUnfortunately the story isn’t complete yet. if you fireup firefox from within WSL and go to the mullvad check website it will probably show that you are conected to mullvad but your DNS is the non-mullvad DNS. To resolve this do the following (mullvad link)sudo systemctl enable systemd-resolvedsudo vim /etc/systemd/resolved.conf# Select a DNS option in the resolved.conf by removing the # in front of the one you want to use:DNS=194.242.2.2 #dns.mullvad.netDNSSEC=noDNSOverTLS=yesDomains=~.sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.confsudo systemctl restart systemd-resolvedresolvectl statusBy default WSL re-writes the resolved configs so we have to disable that in wsl.sudo vim /etc/wsl.confand add these lines at the end of the file[network]generateResolvConf = falsego to windows command line and execute the followingwsl --shutdownRun ubuntu wsl again, and check status of resolved daemon using the following:resolvectl status``If there is an error you may have to run the following command again.``bashsudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.confsudo systemctl restart systemd-resolvedresolvectl statusHow to check everything is finego to the mullvad check status page using firefox from within wsl and see its results. All should be green with no leaks etc.Check status from bashChecking whether there is DNS leak or mullvad is working is not ideal. However, there is a tool which lets you check whether there is a DNS leak in github call dnsleaktest.curl https://raw.githubusercontent.com/macvk/dnsleaktest/master/dnsleaktest.sh -o dnsleaktest.shchmod +x dnsleaktest.sh./dnsleaktest.shcurl https://am.i.mullvad.net/connectedThis will show if you are leaking dns AND if you are connected to the mullvad servers.References https://mullvad.net/en https://mullvad.net/account/openvpn-config?platform=linux https://mullvad.net/en/help/linux-openvpn-installation https://mullvad.net/en/check https://joemo.dev/posts/wsl-dns-resolution/ https://mullvad.net/en/help/dns-over-https-and-dns-over-tls#linux https://github.com/macvk/dnsleaktest" }, { "title": "Can Bus Communication using Python", "url": "/posts/Can-Comms-python/", "categories": "Electronics, Basics", "tags": "Electronics", "date": "2024-07-05 01:20:00 +0100", "snippet": "IntroductionThis article is an installation and use case guide for communicating with can devices using python. For this article I am focussing on using the PCAN-USB usb-to-can hardware, but follow...", "content": "IntroductionThis article is an installation and use case guide for communicating with can devices using python. For this article I am focussing on using the PCAN-USB usb-to-can hardware, but follow the link to see if your hardware is supported - python-can interfaces.Install free commercial tools and driversWe will first install the peak can drivers and a free software to view the can messages PCAN-View. Next install candb++ which lets you open, view and create dbc files.Python Libraries InstallationThe first library is python-can. The python-can library provides Controller Area Network support for Python, providing common abstractions to different hardware devices, and a suite of utilities for sending and receiving messages on a CAN bus. It can use pywin32 extension to run faster using windowsAPI.To install perform the following from inside your development venv:pip install python-canpip install python-can[pcan]python -m pip install --upgrade pywin32Then you have to run the post-install script for pywin32 from OUTSIDE of the venv AND with admin rights. Open a command window as administrator and execute the followingpython [venv root folder path]\\Scripts\\pywin32_postinstall.py -installThe other important library to install specially using DBC files (CAN database file) is to install cantools library. Run this from within your venv.pip install cantoolsYou are all set !How to communicate via canBelow is a simple script from the documentation on how to send a simple packet using pcan and configure bus for a specific bitrate 12.import canwith can.interface.Bus(interface='pcan', bitrate=250000) as bus: msg = can.Message( arbitration_id=0xC0FFEE, data=[0, 25, 0, 1, 3, 1, 4, 1], is_extended_id=True ) try: bus.send(msg) print(f\"Message sent on {bus.channel_info}\") except can.CanError: print(\"Message NOT sent\")However, this is quite difficult as you have to set all the individual bytes in a packet manually. A better option is to use the cantools package. Here is an example from the cantools docs where ExampleMessage has an address of 0x1f0 and within the 8 bytes Temperature and AverageRadius are data as shown in the screenshot of the candb++ tool.import canimport cantoolsfrom pprint import pprintdb = cantools.database.load_file('tests/files/dbc/motohawk.dbc')pprint(db.messages)example_message = db.get_message_by_name('ExampleMessage')pprint(example_message.signals)can_bus = can.interface.Bus(interface='pcan', bitrate=250000)data = example_message.encode({'Temperature': 250.1, 'AverageRadius': 3.2, 'Enable': 1})message = can.Message(arbitration_id=example_message.frame_id, data=data)can_bus.send(message)The pprint output is shown below[message('ExampleMessage', 0x1f0, False, 8, 'Example message used as template in MotoHawk models.')][signal('Enable', 7, 1, 'big_endian', False, 1.0, 0, 0.0, 0.0, '-', False, None, {0: 'Disabled', 1: 'Enabled'}, None), signal('AverageRadius', 6, 6, 'big_endian', False, 0.1, 0, 0.0, 5.0, 'm', False, None, None, ''), signal('Temperature', 0, 12, 'big_endian', True, 0.01, 250, 229.53, 270.47, 'degK', False, None, None, None)]Important Gotcha for Displaying encoded DataThe data encoded by cantools when printed is shown as a series of hex bytes except if the data can be displayed as a valid ascii character3. This can sometimes create confusion that perhaps the data didn’t get encoded correctly.&gt;&gt;datab' \\x00\\x00\\x00\\x00\\x00\\x00\\x00'&gt;&gt;data.hex()'2000000000000000'In the above example, 0x20 has an equivalent ascii character of space 4 and therefore displayed with a space. The best way to prevent confusion is to use .hex() method to display the hex values.References https://python-can.readthedocs.io/en/stable/ &#8617; https://python-can.readthedocs.io/en/stable/interfaces.html &#8617; https://stackoverflow.com/questions/57152397/to-bytes-function-returning-odd-value &#8617; https://www.rapidtables.com/code/text/ascii-table.html &#8617; " }, { "title": "Oscilloscope Passive Probes", "url": "/posts/Oscilloscope-passive-probes/", "categories": "Electronics, Basics", "tags": "Electronics", "date": "2024-06-28 01:20:00 +0100", "snippet": "IntroductionThis is blank page.another test", "content": "IntroductionThis is blank page.another test" }, { "title": "Elmer Trials and Tribulation", "url": "/posts/elmer-trials-tribulations/", "categories": "ElmerCSC, Elmer-Tutorial", "tags": "Examples", "date": "2023-10-04 01:10:00 +0100", "snippet": "IntroductionElmerCSC is a versatile FEM package which can potentially do electromagnetics-transient, thermal, mechanical stress calculations. These feature sets it apart and more powerful than the ...", "content": "IntroductionElmerCSC is a versatile FEM package which can potentially do electromagnetics-transient, thermal, mechanical stress calculations. These feature sets it apart and more powerful than the open source FEMM normally used by electrical engineers for magnetostatics. This post essentially dumps all tests and important forum post that i feel is needed to work with elmer properly.Flux and Flux linkage calculations 1https://www.elmerfem.org/forum/viewtopic.php?p=27336&amp;hilit=boundary+int#p27336https://www.elmerfem.org/forum/viewtopic.php?p=15376&amp;hilit=boundary+int#p15376https://www.elmerfem.org/forum/viewtopic.php?p=26267&amp;hilit=flux+body+int#p26267https://www.elmerfem.org/forum/viewtopic.php?t=7884https://www.elmerfem.org/forum/viewtopic.php?t=6895&amp;hilit=flux+body+int&amp;start=10Airgap Flux densityhttp://www.elmerfem.org/forum/viewtopic.php?t=7685Core Loss Calculationhttp://www.elmerfem.org/forum/viewtopic.php?p=27854&amp;hilit=rotor+stress#p27854Centrifugal stress Calculationhttp://www.elmerfem.org/forum/viewtopic.php?t=7859&amp;start=10http://www.elmerfem.org/forum/viewtopic.php?p=27167&amp;hilit=rotor+stress#p27167http://www.elmerfem.org/forum/viewtopic.php?p=5145&amp;hilit=centrifugal+stress#p5145https://github.com/gforti84/ElmerFiles/tree/mainhttps://github.com/mrkearden/ElmerFEM_Colab" }, { "title": "Rotating Ring Stress Calculation", "url": "/posts/Stress_ring/", "categories": "Mechanical, Fundamentals", "tags": "Equations", "date": "2023-01-14 00:20:00 +0000", "snippet": "IntroductionRadial tensile inertia stress\\[{ \\sigma }_{ r }=\\frac { 3+\\upsilon }{ 8 } \\cdot \\rho \\cdot { w }^{ 2 }\\cdot ({ R }^{ 2 }+{ R }_{ 0 }^{ 2 }-\\frac { { R }^{ 2 }{ R }_{ 0 }...", "content": "IntroductionRadial tensile inertia stress\\[{ \\sigma }_{ r }=\\frac { 3+\\upsilon }{ 8 } \\cdot \\rho \\cdot { w }^{ 2 }\\cdot ({ R }^{ 2 }+{ R }_{ 0 }^{ 2 }-\\frac { { R }^{ 2 }{ R }_{ 0 }^{ 2 } }{ { r }^{ 2 } } -{ r }^{ 2 })\\]Tangential tensile inertia stress\\[{ \\sigma }_{ t }=\\frac { \\rho \\cdot { w }^{ 2 } }{ 8 } \\cdot \\left[ (3+\\upsilon )\\cdot ({ R }^{ 2 }+{ R }_{ 0 }^{ 2 }+\\frac { { R }^{ 2 }{ R }_{ 0 }^{ 2 } }{ { r }^{ 2 } } )-(1+3\\upsilon )\\cdot { r }^{ 2 } \\right]\\]Maximum radial stress\\[{ { (\\sigma }_{ r }) }_{ max }=\\frac { 3+\\upsilon }{ 8 } \\cdot \\rho \\cdot { w }^{ 2 }\\cdot { (R-{ R }_{ 0 }) }^{ 2 }\\]Maximum tangential stress\\[{ { (\\sigma }_{ t }) }_{ max }=\\frac { \\rho \\cdot { \\omega }^{ 2 } }{ 4 } \\cdot \\left[ (3+\\upsilon )\\cdot { R }^{ 2 }+(1-\\upsilon )\\cdot { R }_{ 0 }^{ 2 } \\right]\\]Dimensional change in the outer radius\\[\\Delta R=\\frac { \\rho \\cdot { \\omega }^{ 2 }\\cdot R }{ 4\\cdot E } \\cdot \\left[ (1-\\upsilon )\\cdot { R }^{ 2 }+(3+\\upsilon )\\cdot { R }_{ 0 }^{ 2 } \\right]\\]Dimensional change in the inner radius\\[{ \\Delta R }_{ 0 }=\\frac { \\rho \\cdot { \\omega }^{ 2 }\\cdot { R }_{ 0 } }{ 4\\cdot E } \\cdot \\left[ (3+\\upsilon )\\cdot { R }^{ 2 }+(1-\\upsilon )\\cdot { R }_{ 0 }^{ 2 } \\right]\\]" }, { "title": "Git setup for Different Login Credentials", "url": "/posts/git-repository-2-logins/", "categories": "Ubuntu, Ubuntu-Tutorial", "tags": "Installation", "date": "2023-01-14 00:20:00 +0000", "snippet": "IntroductionSometimes you want to have two different credentials for working with two different repositories. For example lets say that you have a client that wants you to access their Azure accoun...", "content": "IntroductionSometimes you want to have two different credentials for working with two different repositories. For example lets say that you have a client that wants you to access their Azure account and you have your own personal github account.Needless to say the two credentials for git will be different and you want to have a seamless experience is working with two different git credentials.Enter .gitconfig to the rescue.gitconfig allows you to control which folder in git uses which credentials. To use this first you have to create a ‘.gitconfig’ file in your home directory. Please note file does not have a name before the ‘.’[color]\tui = auto[color \"diff\"]\tmeta = yellow bold\tcommit = green bold\tfrag = magenta bold\told = red bold\tnew = green bold\twhitespace = red reverse[core]\teditor = vim [includeIf \"gitdir:~/Work/01_git-repos/xyz/\"] path = ~/Work/01_git-repos/xyz/.gitconfig.xyz[includeIf \"gitdir:~/Work/01_git-repos/abc/\"] path = ~/Work/01_git-repos/abc/.gitconfig.abc[includeIf \"gitdir:~/Work/01_git-repos/public/\"] path = ~/Work/01_git-repos/public/.gitconfig.personalThe main thing happening in the files is the includeIf statements. Basically they re-direct git depending on which folder git is operating in to use a different .gitconfig file. The way I have organised my folders is that for company ‘xyz’ the main folder is ~/Work/01_git-repos/xyz under which all the git projects related to that company is stored, whereas for the other company ‘abc’ git repository is located in ~/Work/01_git-repos/abc/.gitconfig.abc. For all other open source github projects the main folder is ~/Work/01_git-repos/public/.Create SSH key-pairsBefore proceeding any further create your SSH keys. There is a good tutorial by github on how to do this. The ssh key pair files is usually located in this folder (~/.ssh/). For this tutorial I am assuming that there are 3 files by following names id_rsa_xyz (for company xyz), id_ed_abc (for company abc) and id_ed_my-github for your personal github ssh key. Please note it has been assumed that company xyz uses an older RSA based ssh key whereas company abc and your personal key is ed-25519. It does not make any difference as such except that you may want to name your ssh key files to remind you which files are generated using which algorithm as a best practice (hence the _rsa in the company xyz key name).Create project specific .gitconfig filesSo next in the ‘xyz’ company folder ~/Work/01_git-repos/xyz/ create a file ‘.gitconfig.xyz’ and copy the following lines into it. (change the name, email and id_rsa_xyz to the appropriate values depending on your actual file names).[user] name = user-xyz email = user@xyz.com[core]sshCommand = \"ssh -i ~/.ssh/id_rsa_xyz\"In the ‘abc’ company folder ~/Work/01_git-repos/abc/ create a file ‘.gitconfig.abc’ and copy the following lines into it.(change the name, email and id_rsa_xyz to the appropriate values depending on your actual file names).[user] name = abc email = user@outlook.com[core]sshCommand = \"ssh -i ~/.ssh/id_ed_abc\"Finally for the public repositories folder ~/Work/01_git-repos/public/ create a ‘.gitconfig.personal’ file and copy the following lines into it.(change the name, email and id_rsa_xyz to the appropriate values depending on your actual file names).[user] name = my-github-name email = my-git-email@outlook.com[core]sshCommand = \"ssh -i ~/.ssh/id_ed_my-github\" CheckClone a repository by going into the appropriate company folder. Once cloned cd into the cloned repository and use the following commands to list the git config used by git. (Note it only works inside an actual git repository). For examplecd ~/Work/01_git-repos/public/git clone git@github.com:Digilent/digilent-xdc.gitcd digilent-xdc-mastergit config --listThe last command should show the username, email address as well as the ssh key file used by git inside that folder.Cherrio !!" }, { "title": "Docker Part 1 - Installation", "url": "/posts/docker-part-1-installation/", "categories": "Ubuntu, Ubuntu-Tutorial", "tags": "Installation", "date": "2023-01-14 00:20:00 +0000", "snippet": "IntroductionPlaceholder for docker installation for scientific software like Ansys.ReferencesAnsys docker[3]:https://www.cfd-online.com/Forums/ansys/231493-ansys-installation-docker-container.html[...", "content": "IntroductionPlaceholder for docker installation for scientific software like Ansys.ReferencesAnsys docker[3]:https://www.cfd-online.com/Forums/ansys/231493-ansys-installation-docker-container.html[4]:https://askubuntu.com/questions/872792/what-is-xdg-runtime-dir[5]:https://github.com/compscidr/amdgpu-docker/blob/master/install_driver.sh[6]:https://blog.roboflow.com/use-the-gpu-in-docker/[7]:https://linuxhandbook.com/setup-opencl-linux-docker/[8]:https://netslovers.com/post/how-to-share-gpu-with-docker-container/#ftoc-restart-the-docker-service[9]:https://askubuntu.com/questions/1228683/can-not-install-or-run-glxgears-from-ubuntu-usb[10]:https://github.com/RadeonOpenCompute/ROCm-docker/issues/65[11]:https://community.amd.com/t5/instinct-accelerators/the-amd-deep-learning-stack-using-docker/ba-p/416431“same file descriptor” warning on amdgpu #21 [12]:https://github.com/freebsd/drm-kmod/issues/21Google search show prime-select nvidia[]:https://askubuntu.com/questions/1384110/what-gpu-is-active-and-how-to-switch-between-them[]:https://forums.developer.nvidia.com/t/unable-to-get-prime-listed-in-nvidia-x-server-settings-under-ubuntu-linux-18-10-on-thinkpad-x1-extreme/66486docker stuffhttps://docs.docker.com/engine/reference/commandline/restart/https://www.tutorialspoint.com/docker/building_docker_files.htmAnsys:[13]:https://www.cfd-online.com/Forums/ansys/231493-ansys-installation-docker-container.html[14]:https://forum.ansys.com/forums/topic/running-first-time-configuration-everytime/elmer:https://raw.githubusercontent.com/ElmerCSC/elmerfem/devel/docker/elmer.dockerfilehttps://github.com/ElmerCSC/elmerfemqt in docker:google - run qt application in docker dependencieshttps://www.qtembeddeddays.com/wp-content/uploads/2021/05/Containerize-Your-Qt-Embedded-Application.pdfhttps://github.com/carlonluca/docker-qt/blob/master/Dockerfile_5.15.2x11 in docker:https://askubuntu.com/questions/1249043/run-simple-x11-app-in-docker-container-on-ubuntu-20-04https://github.com/mviereck/x11dockerkeyboard locale dockerhttps://askubuntu.com/questions/876240/how-to-automate-setting-up-of-keyboard-configuration-packagedocker-gtkhttps://github.com/clayrisser/docker-gtk/blob/master/deployment/Dockerfiledocker - nvidia - openglhttps://hub.docker.com/r/nvidia/openglhttps://forum.level1techs.com/t/how-to-rtx-3090-and-tensorflow-like-a-pro/166639https://github.com/NVIDIA/nvidia-container-runtimehttps://gitlab.com/nvidia/container-images/opengl/blob/ubuntu20.04/glvnd/devel/Dockerfilehttps://github.com/NVIDIA/nvidia-container-runtime/tree/main/dockerhttps://askubuntu.com/questions/944838/libxp-so-6-missing-for-ubuntu-17-04https://docs.docker.com/config/daemon/#docker-daemon-directoryhttps://www.cfd-online.com/Forums/ansys/115426-how-install-ansys-ubuntu.htmlhttps://www.cfd-online.com/Forums/cfx/25236-ansys-workbench-uncertified-linux-distros.html" }, { "title": "Installing and configuring Modelsim on docker", "url": "/posts/Modelsim-ubuntu-docker/", "categories": "Ubuntu, Ubuntu-Tutorial", "tags": "Installation", "date": "2023-01-14 00:20:00 +0000", "snippet": "IntroductionModelsim is used for simulating vhdl codes. However it has a bunch of 32 bit dependencies and I was worried if it will break my system’s other dependencies. So i decided to write a dock...", "content": "IntroductionModelsim is used for simulating vhdl codes. However it has a bunch of 32 bit dependencies and I was worried if it will break my system’s other dependencies. So i decided to write a dockerfile and use docker to be able to run the program.Intel provides a free to use modelsim version which can be installed stand alone. However, it does not provide instructions on how to use with docker. A dockerfile for modelsim is provided in my github repository which is free to use.References" }, { "title": "Installing and configuring UfW", "url": "/posts/ufw-setup-and-configuration/", "categories": "Ubuntu, Ubuntu-Tutorial", "tags": "Installation", "date": "2023-01-13 00:20:00 +0000", "snippet": "IntroductionUfW is un complicated firewall. Here is how to configure it properlyReferences", "content": "IntroductionUfW is un complicated firewall. Here is how to configure it properlyReferences" }, { "title": "Nodejs Part 1 - Installing and Trying out Zotero", "url": "/posts/nodejs-installation/", "categories": "Nodejs, Nodejs-Tutorial", "tags": "Installation", "date": "2023-01-12 00:20:00 +0000", "snippet": "IntroductionNodejs is used to run javascript files.InstallationFor ubuntu you can follow the official instruction. For ubuntu 22.04 this is what I ran in the terminal.curl -fsSL https://deb.nodesou...", "content": "IntroductionNodejs is used to run javascript files.InstallationFor ubuntu you can follow the official instruction. For ubuntu 22.04 this is what I ran in the terminal.curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash - &amp;&amp;\\sudo apt-get install -y nodejsnodejs -vnode -vInstalling Pdf.jsThe official instruction as repeated below.git clone https://github.com/mozilla/pdf.js.gitcd pdf.jsnpm install -g gulp-clinpm installgulp server" }, { "title": "Vivado Board File Management", "url": "/posts/Vivado-board-file-management/", "categories": "Vivado, Vivado-Tutorial", "tags": "Installation", "date": "2023-01-09 00:20:00 +0000", "snippet": "Adding Board files from RepositoriesIn Xilinx Vivado one of the things you have to do to use a board from a particular manufacturer is that you have to add the board files provided by them. The boa...", "content": "Adding Board files from RepositoriesIn Xilinx Vivado one of the things you have to do to use a board from a particular manufacturer is that you have to add the board files provided by them. The board files contain the pin mapping and the memory interface generator project which allows you to develop your project by pulling in peripherals from the board menu.The usual technique is to copy board file folders to the vivado path. However, its then difficult to version control it and every time the board manufacturer updates the board files you have to keep copy pasting the files.A more elegant solution is to clone each manufacturer board file repository in a separate folder and then to link it into Vivado by adding a small tcl script which will pull all the board files. This enables you to keep your local repository updated with the remote (done separately using git pull) and every time you run Vivado the most recent board files are pulled into Vivado without user intervention.Digilent provides a similar solution Appendix: Installing the Board Files via the “vivado-boards” Github Repository where they recommend to use a tcl file to link with their local repository folder, however it does not show how to manage more than one board manufacturer.ProcedureFirst cd into your .xilinx folder in your home directory (this directory is normally hidden in ubuntu). For my system I used the following commandscd ~/.Xilinx/VivadoOnce there create a file named ‘Vivado_init.tcl’. You can use Vim or any preferred text editor of your choice. For my system this file contains the following lines.set_param board.repoPaths [list \"~/Work/01_git-repos/public/vivado-boards/new/board_files\" \"~/Work/01_git-repos/public/vivadoBSP\"]You can see i have two different folders listed, one is the board files for Numato and the other is the board file location of Digilent. In addition Digilent provides the constraints files in a separate repository which you may also find useful to clone.CheckOnce done, run Vivado and create a new project and check if the board now appear in the menu.Cherrio !!" }, { "title": "Ubuntu on Thinkbook Part 1 - Installing Nvidia Drivers", "url": "/posts/ubuntu-tutorial-1-nvidia-drivers/", "categories": "Ubuntu, Ubuntu-Tutorial", "tags": "Installation", "date": "2023-01-09 00:20:00 +0000", "snippet": "IntroductionIn this first part of the multi-part tutorial I will be walking you through some of the issues you might face while installing ubuntu 22.04 on Lenovo Thinkbook 16g2 and ways to solve co...", "content": "IntroductionIn this first part of the multi-part tutorial I will be walking you through some of the issues you might face while installing ubuntu 22.04 on Lenovo Thinkbook 16g2 and ways to solve common issues. The tutorials are heavily focused on issues around installing technical/simulation software and its intended audience is an advanced beginner using Ubuntu/Linux for doing scientific/technical work in linux. This also is part of my effort to document for myself the issues and solutions to installation woes and the tricks to solve it. I will provide useful references and links that i found spending hours searching for solutions to problems. Hopefully even if your laptop/desktop does not match my particular laptop specifications you will still be able to get some pointers to solving these common problems which to my experience is not quite properly documented.My laptop has an AMD 5800H, 8 core APU processor along with Nvidia RTX 3060 GPU. Installing Ubuntu is fairly straight forward and there are several step-by-step tutorials1 that you can use if you are unfamiliar with the install process.MotivationSo I recently came to own a Thinkbook 16p G2 ACH2 laptop which was a great upgrade over my older dell Inspiron 15 gaming laptop3. I needed to run some open source codes such as ElmerFEM4 which were developed in Linux. I had always wondered how Linux will fare for my technical workflow but I never got the opportunity to tinker and try, mainly because most of the technical software need software licences which you cant get when doing just hobby projects. So I decided it will be a good experiment to try linux for work and evaluating for myself if its fit for purpose for use for work as opposed to my normal use case which is for hobby coding projects. Which meant I also got to evaluate other commercial software which I normally run on windows to see how it performs in linux. So this includes the Ansys Suite and Matlab.So, with that in mind I Downloaded the Ubuntu 22.04 LTS ISO, fired up Rufus5 to burn the ISO to a usb stick and off I went. I had originally estimated that it will probably take me 3-4 days to get everything sorted, but it took me about 2.5 weeks to get everything in a workable state. By this i mean that actually the installation of ubuntu was fairly quick and pain free but getting the scientific/technical softwares to run properly took a lot of time to figure out the right way to make it work.AMD APU driversSince my Laptop has an AMD processor with integrated GPU it is wise to install the APU drivers first and then install the GPU drivers. This is because if the Nvidia driver detects another GPU it will have options to dynamically switch which GPU to use, something call a prime profile.However it’s quite confusing to figure out which .deb file to download and install as per the AMD gpu help page. Searching for drivers on the AMD GPU drivers web-site leads to no joy since I could not find the processor in the list. So, instead I navigated to the AMD driver Repository and navigated to the particular version of Ubuntu that I had jammy Jellyfish. So, interestingly at the time of my install and indeed the publication of the post here, there was some issue in the latest version of AMD drivers and the driver file version that shows up is amdgpu-install_5.4.50400-1_all.deb. However, I found out while searching on this issue that AMD has the wrong version of driver in the latest folder. Haha, go figure. So instead we have to go to the main folder in the AMD repo and select the highest version number of driver available which at the time of publication was 22.20.4 released on 10-Nov-2022. Other versions will appear as they are made so do double check the version number you are getting because the driver under latest folder does not seem to have the right version number currently. To install use the following commands as a guide. Also do read this document from AMD on the linux installation process.sudo apt-get updatesudo apt-get upgradesudo apt-get dist-upgradesudo apt-get -y install build-essentialsudo apt-get -y install dkmscd ~Downloads/wget https://repo.radeon.com/amdgpu-install/22.20.5/ubuntu/jammy/amdgpu-install_22.20.50205-1_all.debsudo dpkg -i amdgpu-install_22.20.50205-1_all.deb sudo amdgpu-install --usecase=graphics,opencl --vulkan=amdvlk,proTo check if the install has gone swimmingly, check the install using the following commands.$ glxinfo | grep -iE 'vendor:|device:|version:' Vendor: AMD Radeon Software Device: Mesa DRI Radeon RX 570 (0x166) Version: 21.1.5$ modinfo amdgpu filename: /lib/modules/5.15.0-56-generic/updates/dkms/amdgpu.ko version: 5.16.9.22.20 license: GPL and additional rights description: AMD GPU author: AMD linux driver teamIf you have discrete graphics card from AMD use a similar process but use the amdgpu-pro installer and perhaps an instruction page from Dell can help you.Nvidia DriversOff-the-shelf Ubuntu detects the GPU but installs only the Nvidia Nouveau driver6. This is ok if you are just using the laptop for productivity work but if you are interested in machine learning or GPU based compute then installing the correct proprietary Nvidia Driver is a must. Fortunately Nvidia provides a step-by-step tutorial on how to install. What I found about the instructions are that they are too detailed and give too many options that can easily confuse a reader who is trying to quickly install the drivers. So, I have listed the steps I did so that you can use that as a guide. Please use the actual instructions on the Nvidia page as they get updated regularly, and use my instructions only to navigate through the install process.What I found was the easiest way to install the Nvidia drivers on Ubuntu is to follow the package manager installation guide within the overall install guide. There are other options to install the drivers namely using the runfile method but I found this to be easier and hassle-free.The first thing to do is to double check that you have nvidia GPU installed and the system pre-requisites are met and you know the distribution and release number of your linux kernel.lspci | grep -i nvidiauname -m &amp;&amp; cat /etc/*releaseYou can then follow the rest of the steps in the nvidia ubuntu installation using the package manager guidelines as shown below. Change the distro and arch to reflect the particulars of your system config found using the above steps. After that we use the apt command to install the cuda package (which installs the nvidia drivers as well) and the gds package.sudo apt-key del 7fa2af80export distro=ubuntu2204export arch=x86_64wget https://developer.download.nvidia.com/compute/cuda/repos/$distro/$arch/cuda-keyring_1.0-1_all.debsudo dpkg -i cuda-keyring_1.0-1_all.debsudo apt-get updatesudo apt-get install cudasudo apt-get install nvidia-gdsif you are using python to do machine learning and accessing the cuda toolbox follow the steps in this link to pip install the necessary packages.Once done we have to make sure the cuda installed location is available on path by following the post installation steps.# add to .bashrcexport PATH=/usr/local/cuda-12.0/bin${PATH:+:${PATH}}Reboot your system and see if the desktop launches. Check you nvidia driver install by running the following command and observing a similar response as seen below.$ nvidia-smiTue Jan 10 01:04:39 2023 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 525.60.13 Driver Version: 525.60.13 CUDA Version: 12.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... On | 00000000:01:00.0 Off | N/A | | N/A 43C P8 9W / N/A | 6MiB / 6144MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 3089 G /usr/lib/xorg/Xorg 4MiB | +-----------------------------------------------------------------------------+If you have problems after install and you want to revert to the original nouveau drivers using the following commands to purge the system of the proprietary nvidia drivers.sudo apt-get --purge remove \"*cuda*\" \"*cublas*\" \"*cufft*\" \"*cufile*\" \"*curand*\" \"*cusolver*\" \"*cusparse*\" \"*gds-tools*\" \"*npp*\" \"*nvjpeg*\" \"nsight*\" \"*nvvm*\"sudo apt-get --purge remove \"*nvidia*\" \"libxnvctrl*\"sudo apt-get autoremovesudo apt autoremoveNvidia Brightness Bug - Attempt 1After installation of the nvidia drivers everything worked well except for the brightness control using the keyboard function key. The display was frozen to max. brightness78910. Initially I was very disappointed as the screen was burning my retinas so I hit stack-overflow and came up with a dirty hacky way to reduced back-light running the command line. Note that if you have lcd or equivalent screens the reducing the back-light intensity reduces the brightness using the backlight brightness below using the echo to set the brightness number. If however you have oled screens you have the change the brightness by changing the contrast using the xrandr command below. To use the xrandr command you have to first determine the current screen you are using. For my laptop it was using the eDP for the laptop screen.# for LCD etcecho 40 | sudo tee /sys/class/backlight/amdgpu_bl0/brightness# find out actual brightness settingcat /sys/class/backlight/amdgpu_bl0/actual_brightness# find out max brightness supported by the displaycat /sys/class/backlight/amdgpu_bl0/max_brightness # for OLEDsxrandr --current --verbosexrandr --output eDP --brightness 0.5Nvidia Brightness Bug - Attempt 2Using the instruction originally the changes proposed to grub did not work for me. So I did a bit of hit-and-trial to get the final configuration when re-enabled the back-light control on my laptop.sudo vim /etc/default/grub# edit the following line in grub file and save using &lt;esc&gt;:wq to write the modified fileGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash amdgpu.backlight=0 nvidia.NVreg_RegistryDwords=EnableBrightnessControl=1 acpi_backlight=video\"sudo update-grubsudo rebootAfter reboot check again whether the brightness control is working either through the keyboard shortcut or through the ubuntu display settings.Check Nvidia InstallOk, so now you are happy that the computer isn’t doing something funny, we should cross-check that the nvidia driver has actually been successfully installed.# after reboot install mesa-utils to run glxgears programsudo apt install mesa-utils# check which gpu in control $ prime-select --help Usage: /usr/bin/prime-select nvidia|intel|on-demand|query$ prime-select query on-demand# test graphics performance by running a simple opengl gears programglxgears -infosudo apt-get install clinfonvidia-smiglxinfo | grep \"OpenGL renderer\"glxinfo | grep -iE 'vendor:|device:|version:'lspci | grep -i nvidialsmod | grep nvidiasudo lshw -c videolspci -nnk | egrep -i --color 'vga|3d|2d' -A3 | grep 'in use'Check GPU SwitchingAs the system has 2 GPUs one on the Ryzen 7 APU and the other the discrete Nvidia graphics card, we need to check that we can select or rather force-select which GPU to use. Use the following lines to select and then check if the driver has taken control of the display. Its to be noted that in the prime-select option, to select the Ryzen APU as the GPU you actually have to use prime-select intel and not prime-select amd. The authors of prime-select i guess couldn’t be bothered to change the vendor name to AMD. Regardless, choosing intel means choosing the cpu integrated GPU for graphics rendering and prime-select nvidia selects the discrete GPU.# test by switching gpu to amdsudo prime-select intelsudo reboot# check to see the AMD graphics in chargeglxinfo |grep vendor# change to Nvidia and check again.sudo prime-select nvidiasudo reboot# check to see the Nvidia graphics in chargeglxinfo |grep vendorOther Unsorted References https://docs.nvidia.com/deploy/cuda-compatibility/index.html https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#ubuntu https://www.omgubuntu.co.uk/2022/06/fix-apt-key-deprecation-error-on-ubuntu https://askubuntu.com/questions/1406420/cant-change-brightness-on-version-22-04 https://askubuntu.com/questions/23238/how-can-i-find-what-video-driver-is-in-use-on-my-system https://www.reddit.com/r/Ubuntu/comments/ttwm5y/install_specific_cuda_version_112_ubuntu_24044_lts/ https://gist.github.com/Mahedi-61/2a2f1579d4271717d421065168ce6a73 https://linuxconfig.org/how-to-check-cuda-version-on-ubuntu-20-04-focal-fossa-linux https://askubuntu.com/questions/1417418/unmet-dependencies-ubuntu-22-04-amdgpu-hip-support https://community.amd.com/t5/drivers-software/cannot-run-amdgpu-install-on-ubuntu-22-04-1/td-p/561053 https://askubuntu.com/questions/1417418/unmet-dependencies-ubuntu-22-04-amdgpu-hip-support https://repo.radeon.com/amdgpu/ https://wiki.gentoo.org/wiki/AMDGPU#Hardware_detection https://wiki.archlinux.org/title/PRIME https://askubuntu.com/questions/40779/how-do-i-install-a-deb-file-via-the-command-line https://linuxhint.com/ubuntu_dpkg_installation/ https://linuxconfig.org/amd-radeon-ubuntu-20-04-driver-installation https://www.amd.com/en/support/kb/faq/amdgpu-installation https://github.com/nvidia/cuda-samples https://forum.manjaro.org/t/brightness-control-and-165hz-monitor-not-working-on-lenovo-legion-5-pro/61314 https://gist.github.com/wangruohui/df039f0dc434d6486f5d4d098aa52d07 https://installati.one/install-dkms-ubuntu-22-04/ https://askubuntu.com/questions/1329928/legion-5-pro-brightness-control-doesnt-work-on-ubuntu-20-04-with-nvidia-driver https://github.com/systemd/systemd/issues/24223 https://gitlab.freedesktop.org/drm/amd/-/issues/1671 https://patchwork.kernel.org/project/platform-driver-x86/patch/20220316012516.2233984-1-ddadap@nvidia.com/ https://unix.stackexchange.com/questions/691614/changing-brightness-only-works-after-system-resumes-from-sleep https://www.linuxcapable.com/how-to-install-linux-mainline-kernel-on-ubuntu-22-04-lts/ https://www.addictivetips.com/ubuntu-linux-tips/downgrade-ubuntu-kernel/ https://forums.developer.nvidia.com/t/brightness-not-working-after-upgrading-to-ubuntu-22-04/224227 https://www.amd.com/en/support/kb/release-notes/rn-amdgpu-unified-linux-20-20 https://amdgpu-install.readthedocs.io/en/latest/install-installing.html https://askubuntu.com/questions/1124253/missing-firmware-for-amdgpu https://www.amd.com/en/support/kb/release-notes/rn-amdgpu-unified-linux-22-40 https://community.amd.com/t5/drivers-software/ubuntu-20-04-4-driver-21-50-installation-fails/m-p/513502#M153242 https://repo.radeon.com/amdgpu-install/22.20.5/ubuntu/focal/References How to install Ubuntu &#8617; Thinkbook 16p Specs &#8617; Dell Inspiron 15 7567 &#8617; ElmerFEM &#8617; Rufus &#8617; Ubuntu Nvidia Install &#8617; Nvidia Brightness Issue &#8617; Linux nvidia-wmi-ec-backlight issue &#8617; systemd-Backlight issue &#8617; Stackexchange Brightness Issue &#8617; " }, { "title": "Blog Tutorial 4 - Adding Discussions", "url": "/posts/blog-tutorial-4-commenting/", "categories": "Jekyll, Jekyll-Tutorial", "tags": "Installation", "date": "2022-12-29 00:20:00 +0000", "snippet": "IntroductionIn this fourth part of the multi-part tutorial I will be walking you through setting up the discussions/commenting system for your posts. Its is always nice to learn from improvements p...", "content": "IntroductionIn this fourth part of the multi-part tutorial I will be walking you through setting up the discussions/commenting system for your posts. Its is always nice to learn from improvements pointed to by the readers and therefore a commenting system is a must for any blog post.There are a number of options available to accomplish this. A few options are below: Disqus Staticman Giscus CusdisAfter looking at all the options I honed in on two. Cusdis for its very lightweight nature and Giscus as its part of github discussions tool. I will show how to setup both. The issue with cusdis was that since my theme used switchable theme (‘dark’ or ‘light’), I was not able to get the cusdis box to change colour scheme as well. After lot of failed attempts I decided Giscus was a better option. Disqus is also nice but loads a lot of trackers etc which I don’t like.Giscus SetupTo do this first we have to setup github discussions first. 1 2 3 4 5Github Discussion SetupGo to your repository &lt;USERNAME&gt;.github.io settings page and enable discussions, like shown below.Click on the setup discussion button and accept the defaults and press start discussion button shown below.Giscus App SettingsFirst head over to the giscus app site. Navigate down to the configuration settings, and fill in the repository name, the discussion title setting, discussion category, Features and theme setting as shown in the screenshots below.Once the settings have been added, scroll to the Enable Giscus setting as shown below for my repository. The giscus site shows a script of setting needed to enable giscus. Here I have deliberately changed the repo-id and the category-id to *.&lt;script src=\"https://giscus.app/client.js\" data-repo=\"pemd-sys/pemd-sys.github.io\" data-repo-id=\"MD************************************=\" data-category=\"General\" data-category-id=\"MDE********************************\" data-mapping=\"pathname\" data-strict=\"0\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"top\" data-theme=\"preferred_color_scheme\" data-lang=\"en\" crossorigin=\"anonymous\" async&gt;&lt;/script&gt;These data fields in the script above are then to be used to modify your _config.yml file appropriately. Here is a snippet of the _config.yml file changes.comments: active: giscus # The global switch for posts comments, e.g., 'disqus'. Keep it empty means disable # The active options are as follows: disqus: shortname: # fill with the Disqus shortname. utterances: repo: # &lt;gh-username&gt;/&lt;repo&gt; issue_term: # &lt; url | pathname | title | ...&gt; # Giscus options › https://giscus.app giscus: repo: pemd-sys/pemd-sys.github.io # &lt;gh-username&gt;/&lt;repo&gt; repo_id: MD************************************= category: General category_id: MDE******************************** mapping: # optional, default to 'pathname' input_position: top # optional, default to 'bottom' lang: # optional, default to the value of `site.lang` reactions_enabled: # optional, default to the value of `1`Push the changes to github, and navigate to any of your blog posts and you will see a commenting section as shown below.Cusdis SettingsCusdis is not supported by default in the _config.yml file 6 7. So, first we have to head over to the cusdis site and create an account with the name of the github.io repository. After setting up the dashboard will look something like this below.clinking on the embedded code button will show the integration script, like that it shows for mine.&lt;div id=\"cusdis_thread\" data-host=\"https://cusdis.com\" data-app-id=\"ec**************************************\" data-page-id=\"{{ PAGE_ID }}\" data-page-url=\"{{ PAGE_URL }}\" data-page-title=\"{{ PAGE_TITLE }}\"&gt;&lt;/div&gt;&lt;script async defer src=\"https://cusdis.com/js/cusdis.es.js\"&gt;&lt;/script&gt;In your repository go to the _layouts/post.html and ADD the following lines at the end.&lt;div id=\"cusdis_thread\" data-host=\"https://cusdis.com\" data-app-id=\"ec**************************************\" data-page-id=\"{{ page.id }}\" data-page-url=\"{{ site.url }}{{ page.baseurl }}{{ page.url }}\" data-page-title=\"{{ page.title }}\" data-theme=\"{{ prefers-color-scheme }}\"&gt;&lt;/div&gt;Go to your _includes/head.html and add the following lines in the script section of the file, just before &lt;\\HEAD&gt; tag.&lt;script async defer src=\"https://cusdis.com/js/cusdis.es.js\"&gt;&lt;/script&gt;Once done perform a git push and check if the github actions throws any errors. Then head to your github.io page and check if the commenting system is working.That’s All Folks ! Happy Blogging.References https://docs.github.com/en/discussions/quickstart &#8617; https://blog.arkey.fr/2022/10/16/moving-from-disqus-to-giscus/ &#8617; https://lazyren.github.io/devlog/use-utterances-for-jekyll-comments.html &#8617; https://www.cesarsotovalero.net/blog/replace-disqus-with-a-better-alternative.html &#8617; https://github.com/apps/giscus &#8617; https://github.com/djyde/cusdis &#8617; https://github.com/Young-Lord/Young-Lord.github.io/blob/b6b4cefbb24ac3e9cc65f40965e7cdd650bb0481/_includes/comments-providers/cusdis.html &#8617; " }, { "title": "Blog Tutorial 3 - Github Workflow", "url": "/posts/blog-tutorial-3-github-actions/", "categories": "Jekyll, Jekyll-Tutorial", "tags": "Installation", "date": "2022-12-29 00:10:00 +0000", "snippet": "IntroductionIn this third part of the multi-part tutorial I will be walking you through setting up the github actions. As I mentioned in the first part of the blog the plan was to create a private ...", "content": "IntroductionIn this third part of the multi-part tutorial I will be walking you through setting up the github actions. As I mentioned in the first part of the blog the plan was to create a private repository in github which will contain all the original settings files and markdown posts. The generated website will then be posted in github-pages as a public repository.There are a number of ways to accomplish this. The easiest is to upload the locally generated _site folder to github public repository. Another more elegant way is that every time we push our local repository to github that will trigger a build process which would generate the static site using github actions and then push that into the public repository. This is the route that we will take as it is more elegant and it also helps us familiarise ourselves with the github actions concept.Github actionsFirst lets look at my github actions code. This is the file pages-deploy.yml inside the /test-privaterepo/.github/workflows foldername: Build and deploy jekyll siteon: push: branches: - master jobs: jekyll: runs-on: ubuntu-latest # can change this to ubuntu-latest if you prefer steps: - name: setup uses: actions/checkout@v2 - name: setup ruby uses: ruby/setup-ruby@v1 with: ruby-version: '3.0' # can change this to 2.7 or whatever version you prefer - name: install dependencies &amp; build site uses: limjh16/jekyll-action-ts@v2 with: enable_cache: true - name: deploy uses: peaceiris/actions-gh-pages@v3 with: publish_dir: ./_site personal_token: ${{ secrets.JEKYLL_PAT }} external_repository: pemd-sys/pemd-sys.github.io publish_branch: mainThere is a lot happening in the script so let me walk you through this. First action is on:push:master, this basically means that the code gets triggered every time we do a push onto the master branch in github.The next action setup: checkout@v2 essentially checks out the master branch into the github CI/CD server. So basically once triggered the github action spawns a process which runs on ubuntu-latest container and in that it basically does a git clone in the server.Then the next lines are setting up the ruby interpreter as it does not come standard with ubuntu-latest. The ruby version has been fixed here to 3.0 as there are some problems with google-protobuf-3.21.12-x86_64-linux which requires ruby version &lt; 3.2.dev, &gt;= 2.5. The lates version of ruby is 3.3 and that causes the build to fail. Go figure !!The next few lines which uses limjh16/jekyll-action-ts@v2 basically runs jekyll on the checked out branch which then generates the latest _site folder.Once the _site folder has been generated now comes the tricky part. To use github actions to push the contents of _site folder onto the public repository. As a refresher our development repository is pemd-sys/test-privaterepo which is a private repository and our blog website is pemd-sys.github.io/ which is public repository.Fortunately someone has already written some code to do this, namely peaceiris/actions-gh-pages@v3, which can push contents of a directory to a different repository. However, to allow github actions to change you repository we need to provide a access token.how to create an Private Access Token for Github ActionsFirst we have to create a private access token. First go to your profile-&gt;settings as shown below.Then go to the developer setting menu as shown belowThen go to fine grained token menu and press the generate token button as shown below.This open up the form similar to that shown below. I used the maximum allowable expiration date of 1 year, added a description of what the token will be used for.Token Settings MenuFor this tutorial we only need the token to access 1 repository, which is our github.io page, so we grant read-write access to github actions for only that repository.Token Settings MenuThis shows the overview of the token creation. Go ahead and press the generate token button.User Settings MenuImmediately after pressing the generate token button, github takes you to the following page, where the private token is display. Press the copy button and copy the private token.User Settings MenuFinally go to your private repository (which holds your jekyll source) and add the personal access token to the secrets menu. Take care to use the same NAME as the one in the github actions script as the name has to be the same.User Settings MenuCheck Github actionsOnce the settings is complete, push the changes to the repository including the new /.github/workflows/pages-deploy.yml file. Then go to the private repository github webpage and check the github actions tab and see if the process completes with success. A screenshot is shown below.User Settings Menu" }, { "title": "Blog Tutorial 2 - Customise Chirpy Theme", "url": "/posts/blog-tutorial-2-customise/", "categories": "Jekyll, Jekyll-Tutorial", "tags": "Installation", "date": "2022-12-29 00:10:00 +0000", "snippet": "IntroductionIn this second part of the multi-part tutorial I will be walking you through setting up two important customisation needed to write a engineering technical blog namely How to write mat...", "content": "IntroductionIn this second part of the multi-part tutorial I will be walking you through setting up two important customisation needed to write a engineering technical blog namely How to write maths How to format the text to justifyHow to write maths equationsIf you are familiar with Latex, then this is very easy to do in jekyll. In order to write maths equations chirpy jekyll documentation recommends using the ‘math: true’ in the post front matter. This I found works ok but equation numbering didn’t work well. So instead I recommend adding the following lines to the _includes\\head.html instead just before the &lt;\\head&gt; tag at the end of the file.&lt;script type=\"text/javascript\" id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;&lt;script&gt;window.MathJax = { tex: { tags: 'ams' }, svg: { fontCache: 'global' }};&lt;/script&gt;You can now test whether math is working or not by adding the following latex code in your post.$$ \\begin {equation} \\label{diffint} \\frac{\\mathrm{d}}{\\mathrm{d} x} \\int e^{x}\\,dx = e^{x} \\end{equation}$$ $$ \\begin{equation*} E = mc^2 \\end{equation*} $$$$\\begin{align} i\\hbar \\frac{\\partial}{\\partial t} \\psi(\\mathbf{r}, t) &amp;= {\\cal H}(\\mathbf{r};t)\\psi(\\mathbf{r}, t) = [\\hat{T} + \\hat{V}]\\,\\psi(\\mathbf{r}, t) \\label{classicalmotion1}\\\\&amp;=\\left[ -\\frac{\\hbar^2}{2m}\\nabla^2 + \\hat{V}(\\mathbf{r}) \\right]\\psi(\\mathbf{r}, t) \\label{classicalmotion2}\\\\\\end{align}$$It should look like the following:\\[\\begin {equation} \\label{diffint} \\frac{\\mathrm{d}}{\\mathrm{d} x} \\int e^{x}\\,dx = e^{x} \\end{equation}\\]\\[\\begin{equation*} E = mc^2 \\end{equation*}\\]\\[\\begin{align} i\\hbar \\frac{\\partial}{\\partial t} \\psi(\\mathbf{r}, t) &amp;= {\\cal H}(\\mathbf{r};t)\\psi(\\mathbf{r}, t) = [\\hat{T} + \\hat{V}]\\,\\psi(\\mathbf{r}, t) \\label{classicalmotion1}\\\\&amp;=\\left[ -\\frac{\\hbar^2}{2m}\\nabla^2 + \\hat{V}(\\mathbf{r}) \\right]\\psi(\\mathbf{r}, t) \\label{classicalmotion2}\\\\\\end{align}\\]Text justificationJustified text looks great in technical reports and papers so why not have justified text in your blog. This is relatively very easy. Add the following line in ‘/assets/css/style.scss’ file at the end. 1 2..post-content { text-align: justify; }References https://github.com/cotes2020/jekyll-theme-chirpy/issues/172 &#8617; https://tomkadwill.com/2017/12/16/how-to-override-css-styles-in-jekyll.html &#8617; " }, { "title": "Blog Tutorial 1 - Setup Jekyll", "url": "/posts/blog-tutorial-1-setup/", "categories": "Jekyll, Jekyll-Tutorial", "tags": "Installation", "date": "2022-12-27 00:10:00 +0000", "snippet": "IntroductionIn this multi-part tutorial I will be walking you through setting up your own blog using github pages and the Jekyll static website generator. There are a few important concepts that I ...", "content": "IntroductionIn this multi-part tutorial I will be walking you through setting up your own blog using github pages and the Jekyll static website generator. There are a few important concepts that I will show you which hopefully will give you a good start to continue your journey into blogging. This is in no means a comprehensive tutorial on either of the tools but rather a concise presentation of work and will focus on a few customisations which I found rather useful. Where-ever needed I will provide links to in other tutorials/blogs/wikis.Git-Hub PagesGithub as you maybe familiar with is a website that lets you post your code so you can keep it organized and share it with other people for software development and version control using Git. Version control allows developers to keep track of their changes, (ie version) in a way that allows developers to make changes to code without fearing that their changes might break their entire code-base. When it does developers can roll back their changes and rework the issue till it is resolved. It allows multiple people to work on different parts of the code allowing for a truely collaborative code creation and maintainance.Now along with source control GitHub Pages lets you take a GitHub repository and turn it into a webpage. In other words, you can use a GitHub repository to host your HTML, CSS, and JavaScript files. If you register for free in github you can host you own website using the same username, i.e., your website will be hosted at &lt;USERNAME&gt;.github.io. For example, my username is pemd-sys so my website is pemd-sys.github.io.Setup Github accountSo, the first thing to do is to create a github account. You can create a free account by registering though this link. Click on the free account page and then choose a name you like provide your email address and go though a standard verification process. For the purpose of this blog we shall assume that your username chosen is USERNAME.Once that is done follow the steps in this link to create a blank github page.Overall structureBefore we go any further we first need to discuss the structure of the repositories we are going to follow. This is similar to how I have setup and its fairly complicated to given an overview first.One of the requirements I had was that I wanted to keep markdown texts private, ie the post*.md files stay safe and hidden in a private repository and only the final generated website is uploaded to the github page account. So, the plan was to keep my source repository private which github allows even for free users and only have the generated static site pages to be uploaded into the public &lt;USERNAME&gt;.github.io repository. This would create a nice opportunity for me to play with the github CI/CD tools as well since I would use the CI/CD tool to upload a new copy of the static web-pages to the public repository every time I did a git push on my source ‘private’ repository.So with that in mind the first thing to do is to go to the github site and create a private repository. My private repository for this tutorial is going to be ‘pemd-sys/test-privaterepo’. Create it blank without readme.md.JekyllThere are many static site generators that are available. A few popular ones are below: Jekyll Hugo Gridsome EleventyI prefer Jekyll since reading on it website it looked easy and I liked their templates, so that’s what I chose, but my choice does not mean that Jekyll is the best for you. Feel free to look around and see what works best for you. For now I will discuss how to setup Jekyll for github page.Installing JekyllThe install page for jekyll has the instructions needed to install jekyll on your computer. The summary of the install steps for ubuntu 22.04 is given below.sudo apt-get install ruby-full build-essential zlib1g-devecho '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrcecho 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrcecho 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrcsource ~/.bashrcgem install jekyll bundlerInstalling Jekyll ThemeI found chirpy very good in terms of its blog structure and it is quite simple to use. So I went with that. The easiest method to go about using the theme for your own use is to just create a copy of the chirpy theme and use it as a starting point for your own repository. The steps are as followsgit clone --bare --single-branch --no-tags --branch master git@github.com:cotes2020/jekyll-theme-chirpy.gitcd jekyll-theme-chirpy.git/git push --mirror git@github.com:pemd-sys/test-privaterepo.gitcd ..rm -rf jekyll-theme-chirpy.git/git clone git@github.com:pemd-sys/test-privaterepo.gitTo explain briefly what I am doing is basically in the first step I clone the master branch of the chirpy theme, second I push the checked out theme into my own repository ‘test-privaterepo’ which was created blank in github. Finally I delete the original chirpy folder and clone my private repository to my local disk. To read more about the details of cloning and copying a repo for you own use there are some excellent resources. [1 2 3 4 5 6, 7, 8].I have realised it a bit late, but this method above fixes the version to whatever the master is currently at. That is not good for future, so in a future post I will show how to do it such that changes to the chirpy repository can be pulled into our own.Once the repository has been cloned we need to run the following steps to install the requirements of the theme.cd test-privaterepobundle installThis should finish without errors.Initial configurationThe original jekyll repository has some default values that needs to be changed to customise it for yourself. 7. Within the Jekyll configuration file (_config.yml), we will need to change the following settings: name - This is the “title” of your website. (for example, “pemd-sys”). description - This is a short tagline describing the contents of your website or blog or yourself. avatar - I have put my head shot. I created a sub-folder in the /assets/img directory called avatar and placed my image avatar.jpeg in it. The relative link has to be provided properly for jekyll to find it. baseurl - This is the name of your GitHub repository prepended by a backslash (/). This ensures GitHub Pages publishes your website using the correct subdirectory.An example of these edited settings is below.# Change to your timezone › http://www.timezoneconverter.com/cgi-bin/findzone/findzonetimezone: Europe/Londontitle: pemd-sys # the main titletagline: Wonder, Think, Invent, Engineer # it will display as the sub-titledescription: &gt;- # used by seo meta and the atom feed A Technical Blog by pemd-sys.# the avatar on sidebar, support local or CORS resourcesavatar: /assets/img/avatar/avatar.jpeggithub: username: pemd-sys # change to your github usernametwitter: username: twitter_username # change to your twitter usernamesocial: # Change to your full name. # It will be displayed as the default author of the posts and the copyright owner in the Footer name: pemd-sys email: me@gmail.com # change to your email address links: # The first element serves as the copyright owner's link - https://twitter.com/username # change to your twitter homepage - https://github.com/pemd-sys # change to your github homepage # Uncomment below to add more social links # - https://www.facebook.com/username # - https://www.linkedin.com/in/usernameRun JekyllTo run the website locally to check everything is working as expected run the following command in the same repository directorybundle exec jekyll serveThis should then generate a few lines in the terminal with the last two lines being something like this Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop.If you click on the server address it should open in your web-browser and you should see the chirpy frontpage. Check your avatar should have changed to the image you provided.Write a new PostWriting a new post is basically creating a new markdown file in the _posts folder and following the naming convention and markdown tags. The chirpy ‘Writing a New Post’ is an excellent guide to follow. Once you are happy with the changes push your changes to github using the following in the repository folder.git add .git commit -m \"First commit\"git pushConclusionIf everything went well, congratulations you have setup jekyll. In the next post I will show how to setup customisation for the posts to display maths and text justification.References https://gist.github.com/pemd-sys/db8dc36f6ce089f1c98c4b990fcc4a16 &#8617; https://www.freecodecamp.org/news/git-clone-branch-how-to-clone-a-specific-branch/ &#8617; https://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-the-current-branch &#8617; https://stackoverflow.com/questions/38027834/git-mirror-a-repo-to-specific-branch &#8617; https://stackoverflow.com/questions/24917489/cloning-a-repo-without-tags &#8617; https://www.earthdatascience.org/workshops/intro-version-control-git/basic-git-commands/ &#8617; https://chrisjhart.com/Creating-a-Simple-Free-Blog/ &#8617; &#8617;2 https://phi-jkim.github.io/posts/Creating-Jekyll-Website/ &#8617; " }, { "title": "Why Write a Technical Blog", "url": "/posts/why-write-a-technical-blog/", "categories": "Jekyll, Jekyll-Tutorial", "tags": "Installation", "date": "2022-12-26 14:10:00 +0000", "snippet": "IntroductionWhen I was pursuing my PhD we lived and worked under the mantra publish or perish. However, like most of us after joining a company most of my technical achievements and concepts are fi...", "content": "IntroductionWhen I was pursuing my PhD we lived and worked under the mantra publish or perish. However, like most of us after joining a company most of my technical achievements and concepts are firewalled by the company as it deems it commercially relevant. Only if you are very lucky and work on a project that requires the company to do public disseminations will you be allowed to publish anything. Alternately if you were able to file a disclosure for your invention which is now available in public domain then you can use that to highlight your achievements. This arrangement works in favour of the company that employs you but is quite disadvantageous to us (except for the pay package of course).In the increasingly competitive world today, being able to showcase your talent to future employers is the key to moving up the career ladder. But one does not need to wait for publication of a journal article or a patent. There are many small projects or analysis that can be publically disclosed simply because it may be well known in the industry or that it is not of much commercial significance. A word of caution though, there sometimes is a fine line between what can be published online and what is a company propritery material and knowledge. A best practice perhaps is to only publish material which are relatively well published in literature but perhaps there is no public source codes or simulations available. This then adds to the overall open source material and everyone wins !It used to be that most technical blogging was in the domain of people more familiar with coding like web-designers, application developers, devOps, AI engineers etc. But increasingly it has slowly started to influence traditional domains as well like mechanical, civil and electrical engineering. There is far more non-paywalled content in the internet on coding than there is for say electrical machine design to take an example.Why Blog ?Blogging is a great way to enhance your technical credibility and can help you grow your professional network. I recently saw on linkedin, a person blogged about some very basic codes on how to plot DQ transforms which is a common mathematical transform used in electrical engineering. I was surprised to see that post had so many comments and reactions. It undoubtedly helped the person grow his professional network.A professional blog will also help you to organise and explain the technology and will help you improve your writing skills. Technical writing skill is something every PhD student needs to master in order to succeed. However, outside of academics it is difficult to keep these skills honed and i have seens lots of poorly written technical reports undoubtedly because the writer has lost the art of technical writing.Roadblocks to bloggingThere are many reasons why engineers from traditional engineering branches do not blog. But here are few that came to my mind. Topic is trivial, why bother ? Someone must have already written about it ! How do i even get started ?I want to address these issues here and show you how one can get started without breaking a sweat.Topic is trivialThis is an interesting one1. How many times have we searched the web for what seems to be a trivial issue and thinking surely someone must have worked it out only to realise after an hour of frantic searching and going up dead-ends that what we thought was trivial and relatively straight forward is super convoluted and not trivial at all. We have all been there !Trivial therefore is relative. What is probably trivial to the web-developer of this blog template is probably not at all trivial to you and me and vice-versa. More over, even if you think it might be trivial, the fact that you spent an hour of your time researching the matter is surely worth documenting, even if its just for yourself. There has been so many occasions when I have spent hours solving something and then not writing about it, only to need it again in a few years time and having to re-invent the wheel all over again. Write it for yourself if not for anyone else.Someone must have written about itSure, if someone has written a good article about it, it does no harm to write a short blurb and cross-reference the good article. More references to the article meeans its shows up higher on the search results (google page rank algorithm).How do I even get startedThis is usually the tripping point. Most people think that writing a blog would mean learning HTML, CSS and other web technologies. In fact I have gone through that as well. Lots of time I would pick up enthusiastically the baton and do some research, browse w3 technologies website, make a template, search stack-overflow for answers to problems of formatting etc and then as other work pressure piles up, leave the blog in a semi-finished state. It has happened to me too many times. I blame it on the fact that I am not a full time coding guru and like everything I dont want to be learning a new language, I just want to start writing.However, over the last decade, lots of static web-site generators have matured to a point where even I can install it relatively easily and start to blog.What is a static web generator, anyhow ?Glad you asked. Well like the name suggests the software converts your documents to web page that can then be uploaded to a web-host. The generated web-site does not support server-side scripting which make a web-page ‘Dynamic’. Most static web site generators allow user to write in Markdown which is a text document and it then converts that to a beautiful blog just by running some scripts (like magic!).Some of you may be familiar with technical typesetting software Latex. I wrote my master’s thesis in 2006 using Latex and although there is some initial learning curve involved, once you have mastered the basics, writing well formatted equations in Latex was so much easier than doing the same in word 2003. Using the static website generators is much like using latex except that the end result is a web-page and not a pdf. In fact in future posts I will show how to convert your latex files into a web-page using another software called pan-doc.The process has now become so easy that, non-experts such as myself can just focus writing the content and the formatting is taken care off by the software.How do I get StartedIn future posts I will be showing how to setup a static web-site generator Jekyll and how you can customise it for equations etc needed to write a good technical blog. Stay tuned !ConclusionIts not late to start to write a technical blog, I am here to help you get started and make this process as pain free as possible.Footnotes and References Shon Ellerton, Jan 9, 2020: There’s Nothing Wrong with Writing About Trivial Things &#8617; " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 07:10:00 +0100", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be...", "content": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt; # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;] # for multiple entries---Having said that, the key author can also identify multiple entries. The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---\\(\\begin {equation} \\label{diffint} \\frac{\\mathrm{d}}{\\mathrm{d} x} \\int e^{x}\\,dx = e^{x} \\end{equation}\\)\\[\\begin{equation*} E = mc^2 \\end{equation*}\\]\\[\\begin{align} i\\hbar \\frac{\\partial}{\\partial t} \\psi(\\mathbf{r}, t) &amp;= {\\cal H}(\\mathbf{r};t)\\psi(\\mathbf{r}, t) = [\\hat{T} + \\hat{V}]\\,\\psi(\\mathbf{r}, t) \\label{classicalmotion1}\\\\&amp;=\\left[ -\\frac{\\hbar^2}{2m}\\nabla^2 + \\hat{V}(\\mathbf{r}) \\right]\\psi(\\mathbf{r}, t) \\label{classicalmotion2}\\\\\\end{align}\\]MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Starting from Chirpy v5.2.0, the property for the preview image is changed to image.path. If upgrading the theme from a prior version, you will have to update posts’ metadata to use new image property.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." } ]
